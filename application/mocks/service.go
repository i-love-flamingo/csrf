// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	web "flamingo.me/flamingo/v3/framework/web"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: session
func (_m *Service) Generate(session *web.Session) string {
	ret := _m.Called(session)

	var r0 string
	if rf, ok := ret.Get(0).(func(*web.Session) string); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Service_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type Service_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - session *web.Session
func (_e *Service_Expecter) Generate(session interface{}) *Service_Generate_Call {
	return &Service_Generate_Call{Call: _e.mock.On("Generate", session)}
}

func (_c *Service_Generate_Call) Run(run func(session *web.Session)) *Service_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web.Session))
	})
	return _c
}

func (_c *Service_Generate_Call) Return(_a0 string) *Service_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Generate_Call) RunAndReturn(run func(*web.Session) string) *Service_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// IsValid provides a mock function with given fields: request
func (_m *Service) IsValid(request *web.Request) bool {
	ret := _m.Called(request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*web.Request) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Service_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type Service_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
//   - request *web.Request
func (_e *Service_Expecter) IsValid(request interface{}) *Service_IsValid_Call {
	return &Service_IsValid_Call{Call: _e.mock.On("IsValid", request)}
}

func (_c *Service_IsValid_Call) Run(run func(request *web.Request)) *Service_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web.Request))
	})
	return _c
}

func (_c *Service_IsValid_Call) Return(_a0 bool) *Service_IsValid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_IsValid_Call) RunAndReturn(run func(*web.Request) bool) *Service_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidHeader provides a mock function with given fields: request
func (_m *Service) IsValidHeader(request *web.Request) bool {
	ret := _m.Called(request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*web.Request) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Service_IsValidHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidHeader'
type Service_IsValidHeader_Call struct {
	*mock.Call
}

// IsValidHeader is a helper method to define mock.On call
//   - request *web.Request
func (_e *Service_Expecter) IsValidHeader(request interface{}) *Service_IsValidHeader_Call {
	return &Service_IsValidHeader_Call{Call: _e.mock.On("IsValidHeader", request)}
}

func (_c *Service_IsValidHeader_Call) Run(run func(request *web.Request)) *Service_IsValidHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web.Request))
	})
	return _c
}

func (_c *Service_IsValidHeader_Call) Return(_a0 bool) *Service_IsValidHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_IsValidHeader_Call) RunAndReturn(run func(*web.Request) bool) *Service_IsValidHeader_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidPost provides a mock function with given fields: request
func (_m *Service) IsValidPost(request *web.Request) bool {
	ret := _m.Called(request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*web.Request) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Service_IsValidPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidPost'
type Service_IsValidPost_Call struct {
	*mock.Call
}

// IsValidPost is a helper method to define mock.On call
//   - request *web.Request
func (_e *Service_Expecter) IsValidPost(request interface{}) *Service_IsValidPost_Call {
	return &Service_IsValidPost_Call{Call: _e.mock.On("IsValidPost", request)}
}

func (_c *Service_IsValidPost_Call) Run(run func(request *web.Request)) *Service_IsValidPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web.Request))
	})
	return _c
}

func (_c *Service_IsValidPost_Call) Return(_a0 bool) *Service_IsValidPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_IsValidPost_Call) RunAndReturn(run func(*web.Request) bool) *Service_IsValidPost_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
